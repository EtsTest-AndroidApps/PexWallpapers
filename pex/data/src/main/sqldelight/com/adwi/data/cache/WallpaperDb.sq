-- Wallpaper Dao ----------------------------------------

CREATE TABLE wallpaperEntity (
	id	INTEGER NOT NULL PRIMARY KEY,
	height	INTEGER AS Int NOT NULL DEFAULT 0,
	url	TEXT NOT NULL,
	photographer	TEXT NOT NULL,
	categoryName	TEXT NOT NULL,
	isFavorite	INTEGER AS Boolean NOT NULL DEFAULT 0,
	updatedAt	INTEGER NOT NULL,
	imageUrlPortrait	TEXT NOT NULL,
	imageUrlLandscape	TEXT NOT NULL,
	imageUrlTiny	TEXT NOT NULL
);

getAllWallpapers:
SELECT * FROM wallpaperEntity;

insertWallpaper:
INSERT OR REPLACE
INTO wallpaperEntity (
id,
height,
url,
photographer,
categoryName,
isFavorite,
updatedAt,
imageUrlPortrait,
imageUrlLandscape,
imageUrlTiny
) VALUES (?,?,?,?,?,?,?,?,?, ?);

getWallpaperById:
SELECT * FROM wallpaperEntity WHERE id = :wallpaperId;

getWallpapersOfCategory:
SELECT * FROM wallpaperEntity WHERE categoryName = :categoryName;

deleteWallpaper:
DELETE FROM wallpaperEntity WHERE id = :id;

updateWallpaperIsFavorite:
UPDATE  wallpaperEntity SET isFavorite = :isFavorite;

-- Curated Dao ----------------------------------------

CREATE TABLE curatedEntity (
       wallpaperId INTEGER NOT NULL PRIMARY KEY
);

insertCurated:
INSERT OR REPLACE INTO curatedEntity (wallpaperId) VALUES (?);

getAllCurated:
SELECT * FROM curatedEntity INNER JOIN wallpaperEntity ON id = wallpaperId;

deleteAllCuratedWallpapers:
DELETE FROM curatedEntity;

-- Daily Dao ----------------------------------------

CREATE TABLE dailyEntity (
       wallpaperId INTEGER NOT NULL PRIMARY KEY
);

insertDaily:
INSERT OR REPLACE INTO dailyEntity (wallpaperId) VALUES (?);

getAllDaily:
SELECT * FROM dailyEntity INNER JOIN wallpaperEntity ON id = wallpaperId;

deleteAllDaily:
DELETE FROM dailyEntity;

-- Search Dao ----------------------------------------

CREATE TABLE searchResult (
       searchQuery TEXT NOT NULL,
       wallpaperId INTEGER NOT NULL PRIMARY KEY,
       queryPosition INTEGER AS Int NOT NULL
);

insertSearchResult:
INSERT OR REPLACE INTO searchResult (
searchQuery,
wallpaperId,
queryPosition
) VALUES (?,?,?);

getSearchResultWallpaperPaged:
SELECT * FROM searchResult INNER JOIN wallpaperEntity ON id = wallpaperId WHERE searchQuery = :query ORDER BY queryPosition;

getLastQueryPosition:
SELECT MAX(queryPosition) FROM searchResult WHERE searchQuery = :searchQuery;

deleteSearchResultsForQuery:
DELETE FROM searchResult WHERE searchQuery = :query;

-- Colors Dao ----------------------------------------

CREATE TABLE colorsEntity (
       name TEXT NOT NULL PRIMARY KEY,
       firstImage TEXT NOT NULL,
       secondImage TEXT NOT NULL,
       thirdImage TEXT NOT NULL,
       forthImage TEXT NOT NULL,
       timeStamp INTEGER NOT NULL DEFAULT 0
);

insertColor:
INSERT OR REPLACE INTO colorsEntity (
name,
firstImage,
secondImage,
thirdImage,
forthImage,
timeStamp
) VALUES (?,?,?,?,?,?);

getAllColors:
SELECT * FROM colorsEntity;

getColor:
SELECT * FROM colorsEntity WHERE name = :colorName;

-- Settings ----------------------------------------

CREATE TABLE settingsEntity (
	"id"	INTEGER NOT NULL PRIMARY KEY,
	"lastQuery"	TEXT NOT NULL,
	"newWallpaperSet"	INTEGER AS Boolean NOT NULL,
	"wallpaperRecommendations"	INTEGER AS Boolean NOT NULL,
	"autoChangeWallpaper"	INTEGER AS Boolean NOT NULL,
	"selectedButton"	INTEGER AS Int NOT NULL,
	"sliderValue"	REAL AS Float NOT NULL,
	"downloadOverWiFi"	INTEGER AS Boolean NOT NULL,
	"autoHome"	INTEGER AS Boolean NOT NULL,
	"autoLock"	INTEGER AS Boolean NOT NULL
);

insertSetting:
INSERT OR REPLACE
INTO settingsEntity (
id,
lastQuery,
newWallpaperSet,
wallpaperRecommendations,
autoChangeWallpaper,
selectedButton,
sliderValue,
downloadOverWiFi,
autoHome,
autoLock
) VALUES (?,?,?,?,?,?,?,?,?,?);

getSetting:
SELECT * FROM settingsEntity;

updateLastQuery:
UPDATE settingsEntity SET lastQuery = :query;

updateNewWallpaperSet:
UPDATE settingsEntity SET newWallpaperSet = :enabled;

updateWallpaperRecommendations:
UPDATE settingsEntity SET wallpaperRecommendations = :enabled;

updateAutoChangeWallpaper:
UPDATE settingsEntity SET autoChangeWallpaper = :enabled;

updateDownloadOverWiFi:
UPDATE settingsEntity SET downloadOverWiFi = :enabled;

updateChangePeriodType:
UPDATE settingsEntity SET selectedButton = :radioButton;

updateChangePeriodValue:
UPDATE settingsEntity SET sliderValue = :periodValue;

updateAutoHome:
UPDATE settingsEntity SET autoHome = :enabled;

updateAutoLock:
UPDATE settingsEntity SET autoLock = :enabled;


-- SearchQueryRemoteKey Dao

CREATE TABLE searchQueryRemoteKeys (
       searchQuery TEXT NOT NULL PRIMARY KEY,
       nextPage INTEGER AS Int NOT NULL
);

insertRemoteKey:
INSERT OR REPLACE
INTO searchQueryRemoteKeys (
searchQuery,
nextPage
) VALUES (?,?);

getRemoteKey:
SELECT * FROM searchQueryRemoteKeys WHERE searchQuery = :searchQuery;